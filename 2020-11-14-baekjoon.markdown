---
layout: post
title:  "Baekjoon 알고리즘 15"
date:   2020-11-14 05:40 +0530
categories: [Baekjoon]
tags: [python]
---

알고리즘 풀기 15일차

할 게 너무 밀렸다,,,,

알고리즘 문제 풀다 3-4시간정도 논문 발표 ppt 만들다 정신 차리니 곧 6시다,,,,(지각 제출 입니당,,,,)

제때제때,,할 일을 하자. 미루지 말자,,,

:)


- #11729     하노이 탑 이동 순서

```python
#11729
#하노이 탑 이동 순서

def hanoi(n, a, b, c):
     if n == 1:
          num.append([a,c])
     else:
          hanoi(n-1, a, c, b)
          num.append([a,c])
          hanoi(n-1, b, a, c)
          
num=[]
hanoi(int(input()), 1, 2, 3)
print(len(num))
print("\n".join([' '.join(str(i) for i in row) for row in num]))

```

굉장히 간단해 보이지만 사실 생각하는데 굉장히 어려워 풀이를 보았다. 글로 푼 풀이도 다 이해가 됐는데 코드를 어디부터 짜야할 지 감이 안왔다. 

원래는 원판을 담을 리스트를 만들어서 [ [], [], [] ] 이런 식으로 관리할 생각이었는데(스택이라 생각) - 리스트에서 빼고 넣고 하기 너무 복잡한 것 같았다.

아주 당연한 접근이려나 4개의 원판이 있다면 (1,2,3,4) 우리는 그걸 3번 장대에 옮길거면 1,2,3이 2번 장대에 있어야한다. (그래야 4번이 3번장대로 이동)

그 전에 3번이 2번에 있어야하고, 그러려면 1,2가 3번에 있어야한다.

위의 하노이 함수를 더 자세히 보면 

```python
def hanoi(n, a, b, c):
     if n == 1:                     #이동할 원판 수가 1개인 경우
          num.append([a,c])         #그냥 3번 장대로 옯기면 된다.
     else:
          hanoi(n-1, a, c, b)       # N-1개의 원판을 1 -> 2번 장대로 이동
          num.append([a,c])         # 가장 큰 원판 N을 1 -> 3번 장대로 이동
          hanoi(n-1, b, a, c)       # N-1개의 원판을 2 -> 3번 장대로 이동
```

이렇게 풀어서 보면 참 이해되는데, 왜 바로 생각을 못하고 생각을 해도 어려울까아~~~~~~~

갈길이 멀다.

---

- #2798     블랙잭

```python
#2798
#카지노에서 제일 인기 있는 게임 블랙잭의 규칙은 상당히 쉽다. 카드의 합이 21을 넘지 않는 한도 내에서, 카드의 합을 최대한 크게 만드는 게임이다. 블랙잭은 카지노마다 다양한 규정이 있다.

n, s = map(int, input().split())
num = list(map(int, input().split()))

sumlist=[]
for i in range(0, n-2):
     for j in range(i+1, n-1):
          for k in range(j+1, n):
               if num[i]+num[j]+num[k]<=s:
                    sumlist.append(num[i]+num[j]+num[k])

sumlist.sort()
print(sumlist[-1])

```

입력값 s를 넘지 않는다 했으니 s보다 작거나 같은 수는 sumlist에 넣고 정렬해주면 맨 마지막 수가 제일 s와 유사할 것.

---

- #2231     분해합

```python
#2231
#분해합 - 어떤 자연수 N이 있을 때, 그 자연수 N의 분해합은 N과 N을 이루는 각 자리수의 합을 의미한다. 어떤 자연수 M의 분해합이 N인 경우, M을 N의 생성자라 한다. 예를 들어, 245의 분해합은 256(=245+2+4+5)이 된다. 따라서 245는 256의 생성자가 된다. 물론, 어떤 자연수의 경우에는 생성자가 없을 수도 있다. 반대로, 생성자가 여러 개인 자연수도 있을 수 있다.

n = int(input())
t = False
for i in range(0, n):
     strn = str(i)
     l = len(strn)
     s = i
     if i < 10:
          s=i*2
     else:
          for j in range(0, l):
               s += int(strn[j])
               
     if s == n:
          print(i)
          t = True
          break

if t == False:
     print(0)
               
```

n 입력까지 자연수 돌면서 확인한다.

우선 한자리 수들은 자신값 + 한자리값, 즉 *2를 해주고, 두자릿 수부터 자릿값을 더해주는 방식으로 생각했다. 각 자리 수를 % 처리해서 구할 수도 있었지만 str으로 배열처럼 생각해서 길이 l을 구해서 각 자리를 int로 형변환해서 각 자리수 합을 구해줬다.

만약 그 합들이 입력 n과 같으면 출력하고 멈추는데, 없을 수도 있다. 없는 경우를 판별 위해 bool값의 변수를 둬서 있다면 true로 끝내고 반복문 다 돌고도 없으면 없는 걸로 0을 출력해준다.

---

## 풀다 만 문제

- #7568     덩치

```python
#7568
#덩치

n = int(input())
dungchi = []
answer = [0 for i in range(n)]
cnt = 1

for i in range(n):
     w, h = map(int, input().split())
     dungchi.append([w,h])

while n>0:
     for i in range(len(dungchi)):
          if dungchi[i][0] == max(dungchi)[0]:
               if dungchi[i][1] == max(dungchi, key=lambda x: x[1])[1]:
                    print(i)
                    answer[i] = cnt
                    cnt+=1
                    dungchi[i] = [0,0]
               else:
                    answer[i] = cnt
                    dungchi[i][0] = 0
               continue
               
     n-=1

print(answer)

```

이건 아직 풀고있는 문제. 추후 수정 예정.

---
