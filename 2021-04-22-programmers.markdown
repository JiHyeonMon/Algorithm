---
layout: post
title: "[프로그래머스] 최댓값과 최솟값, 최솟값 만들기"
date: 2021-04-22 23:59 +0530
categories: 프로그래머스
---

알고리즘 풀기 105일차

오늘은 쉬운 문제 두 개~

:)

- # 최댓값과 최솟값

>

## < 문제 >

문자열 s에는 공백으로 구분된 숫자들이 저장되어 있습니다. str에 나타나는 숫자 중 최소값과 최대값을 찾아 이를 "(최소값) (최대값)"형태의 문자열을 반환하는 함수, solution을 완성하세요.

예를들어 s가 "1 2 3 4"라면 "1 4"를 리턴하고, "-1 -2 -3 -4"라면 "-4 -1"을 리턴하면 됩니다.

## < 제한사항 >

s에는 둘 이상의 정수가 공백으로 구분되어 있습니다.

## < 풀이 >

```python

def solution(s):
    answer = ''
    num = sorted(list(map(int, s.split(' '))))

    answer=str(num[0])+ ' ' + str(num[-1])
    return answer

```

string으로 이뤄진, 공백으로 구분된 숫자 --> 공백을 리스트로 바꿔주고 정렬해준다.

정렬하니 제일 앞 최솟값과 제일 뒤 최댓값을 공백으로 띄워 출력해주면 끝.

---

- # 최솟값 만들기

>

## < 문제 >

길이가 같은 배열 A, B 두개가 있습니다. 각 배열은 자연수로 이루어져 있습니다.

배열 A, B에서 각각 한 개의 숫자를 뽑아 두 수를 곱합니다. 이러한 과정을 배열의 길이만큼 반복하며, 두 수를 곱한 값을 누적하여 더합니다. 이때 최종적으로 누적된 값이 최소가 되도록 만드는 것이 목표입니다.

(단, 각 배열에서 k번째 숫자를 뽑았다면 다음에 k번째 숫자는 다시 뽑을 수 없습니다.)

예를 들어 A = [1, 4, 2] , B = [5, 4, 4] 라면

> A에서 첫번째 숫자인 1, B에서 첫번째 숫자인 5를 뽑아 곱하여 더합니다. (누적된 값 : 0 + 5(1x5) = 5)

> A에서 두번째 숫자인 4, B에서 세번째 숫자인 4를 뽑아 곱하여 더합니다. (누적된 값 : 5 + 16(4x4) = 21)

> A에서 세번째 숫자인 2, B에서 두번째 숫자인 4를 뽑아 곱하여 더합니다. (누적된 값 : 21 + 8(2x4) = 29)

즉, 이 경우가 최소가 되므로 29를 return 합니다.

배열 A, B가 주어질 때 최종적으로 누적된 최솟값을 return 하는 solution 함수를 완성해 주세요.

## < 제한사항 >

배열 A, B의 크기 : 1,000 이하의 자연수

배열 A, B의 원소의 크기 : 1,000 이하의 자연수

## < 풀이 >

```python

def solution(A,B):
    answer = 0

    A = sorted(A)
    B = sorted(B, reverse=True)

    for i in range(len(A)):
        answer += A[i]*B[i]

    return answer

```

곱들의 합으로 최솟값을 만든다. --> 그럼 가장 큰 수에 가장 작은 수를 곱해야 한다.

각 배열을 정렬하는데 A배열은 최솟값이 앞에 오게 B배열은 최댓값이 앞에 오게하여 같은 인덱스끼리 곱해줘 더한게 곱들의 합의 최솟값이 된다.
