---
layout: post
title: "[leetcode] 35. Search Insert Position"
date: 2022-09-14
categories: 이분탐색
level: easy

---



## < 문제 >

Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

## <제한사항>

- 1 <= nums.length <= 104
- -104 <= nums[i] <= 104
- nums contains distinct values sorted in ascending order.
- -104 <= target <= 104

## < 풀이 >

```
class Solution {
    func searchInsert(_ nums: [Int], _ target: Int) -> Int {
        
        // Exception : over range
        if nums.first! >= target { return 0 }
        if nums.last! < target { return nums.count }
        if nums.last! == target {return nums.count - 1}
        
        var min = 0
        var max = nums.count - 1
        
        while true {
            
            var mid = (min + max) / 2
            
            // Same
            if nums[mid] == target {
                return mid
            }
            
            // mid num is smaller than target
            if nums[mid] < target {
                
                // 존재하지 않는 수 && 넣을 위치
                if nums[mid+1] > target {
                    return mid+1
                }
                
                min = mid
            }
            
            // mid num is bigger than target
            if nums[mid] > target {
                
                max = mid
            }
        }
        
        return 0
    }
}

```

이번에도 예외 처리로 3번의 실패 발생!
항상 시작과 끝의 예외가 어렵다,,;;
