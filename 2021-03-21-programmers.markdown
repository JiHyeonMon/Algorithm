---
layout: post
title:  "프로그래머스 코딩테스트"
date:   2021-03-21 23:59 +0530
categories: python
---

알고리즘 풀기 89일차

:)

- # 정수 삼각형

# < 문제 >

삼각형의 꼭대기에서 바닥까지 이어지는 경로 중, 거쳐간 숫자의 합이 가장 큰 경우를 찾아보려고 합니다. 아래 칸으로 이동할 때는 대각선 방향으로 한 칸 오른쪽 또는 왼쪽으로만 이동 가능합니다. 예를 들어 3에서는 그 아래칸의 8 또는 1로만 이동이 가능합니다.

삼각형의 정보가 담긴 배열 triangle이 매개변수로 주어질 때, 거쳐간 숫자의 최댓값을 return 하도록 solution 함수를 완성하세요.

# < 제한사항 >

삼각형의 높이는 1 이상 500 이하입니다.

삼각형을 이루고 있는 숫자는 0 이상 9,999 이하의 정수입니다.

# < 풀이 >

```python

def solution(triangle):
    answer = 0
    d = triangle
    for i in range(1, len(triangle)):
        for j in range(len(triangle[i])):
            if j == 0:
                d[i][j] += triangle[i-1][0]
            elif j == len(triangle[i])-1:
                d[i][j] += triangle[i-1][len(triangle[i-1])-1]
            else:
                d[i][j] += max(triangle[i-1][j-1], triangle[i-1][j])
    return max(d[-1])

```

최대값을 구하는 문제.

각 값을 돌면서 합계를 넣을 배열 d를 만들었다. (기존 triangle 배열을 그대로 넣어 값을 거기서 더해줌.)

처음 값은 들어간 채, 두번째 칸부터 돌기 시작.

칸 하나하나 돌면서 더할 수 있는 위에 값 (좌측 위, 우측 위) 중에 큰 값을 더한다. 

다만, 맨 처음, 맨 끝은 어차피 한 값만 더할 수 있으니 예외 처리 해줬다.

그렇게 가장 큰 경우들 더한 뒤 맨 뒷 줄의 최대값을 리턴해준다.

---

오랜만에 한번에 통과한 문제. 

물론 쉽기도 했지만 그래도 오랜만에 동적 프로그래밍 문제라서 쫄았다..ㅎ

