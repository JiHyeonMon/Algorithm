---
layout: post
title:  "Baekjoon 알고리즘 31"
date:   2020-12-23 06:54 +0530
categories: python
---

알고리즘 풀기 43일차

:)


- #11052     카드 구매하기

카드는 카드팩의 형태로만 구매할 수 있고, 카드팩의 종류는 카드 1개가 포함된 카드팩, 카드 2개가 포함된 카드팩, ... 카드 N개가 포함된 카드팩과 같이 총 N가지가 존재한다.

민규는 카드의 개수가 적은 팩이더라도 가격이 비싸면 높은 등급의 카드가 많이 들어있을 것이라는 미신을 믿고 있다. 따라서, 민규는 돈을 최대한 많이 지불해서 카드 N개 구매하려고 한다. 카드가 i개 포함된 카드팩의 가격은 Pi원이다.

예를 들어, 카드팩이 총 4가지 종류가 있고, P1 = 1, P2 = 5, P3 = 6, P4 = 7인 경우에 민규가 카드 4개를 갖기 위해 지불해야 하는 금액의 최댓값은 10원이다. 2개 들어있는 카드팩을 2번 사면 된다.

P1 = 5, P2 = 2, P3 = 8, P4 = 10인 경우에는 카드가 1개 들어있는 카드팩을 4번 사면 20원이고, 이 경우가 민규가 지불해야 하는 금액의 최댓값이다.

마지막으로, P1 = 3, P2 = 5, P3 = 15, P4 = 16인 경우에는 3개 들어있는 카드팩과 1개 들어있는 카드팩을 구매해 18원을 지불하는 것이 최댓값이다.

카드 팩의 가격이 주어졌을 때, N개의 카드를 구매하기 위해 민규가 지불해야 하는 금액의 최댓값을 구하는 프로그램을 작성하시오. N개보다 많은 개수의 카드를 산 다음, 나머지 카드를 버려서 N개를 만드는 것은 불가능하다. 즉, 구매한 카드팩에 포함되어 있는 카드 개수의 합은 N과 같아야 한다.


```python
#Bottom-Up

n = int(input())
price = [0] * (n+1)
card = [0] + list(map(int, input().split()))

#1개 살 때, 가격
price[1]=card[1]

for i in range(2, n+1):
     for j in range(1, i+1):
          if price[i]<price[i-j]+card[j]:
               price[i] = price[i-j]+card[j]

print(price[n])


```

동적 계획법(DP)의 풀이에 대해 찾아보니 두가지 방법으로 접근하는 것을 알 수 있었다.
Top-Down,  Bottom-Up

위의 풀이는 Bottom-Up방식이다. 말 그대로 작은 수부터 커지며 값을 차곡차곡 쌓아가며 계산하는 방식이다. 


리스트를 1부터 시작해주기 위해 0번째에 0을 넣고 시작한다.
1개를 살때는 1개 입력 그 자체 가격이므로 1을 넣어주고, 2개 이상 부터 반복문을 돌며 price리스트를 채워준다. 

만약 n=4, 4개의 price를 구한다면, price 1,2,3은 채워져 있다.
여기에 구해놓은 price[3]에 card[1]개를 추가해서 구할 수 있고, 구해놓은 price[2]에 card[2]를 더해서 구할 수도 있고... 이렇게 이전 구한 값을 이용해서 하나씩 더해가는 방식이다. 

결과적으로 n개까지 다 price리스트를 채우면 제일 마지막 리스트 값을 반환해주면 된다.

---

아래 풀이는 같은 문제 Top-Down방식으로 풀어보았다.
Top-Down은 큰 수부터 아래로 차곡차곡 내려가는 방식이다보니 재귀함수를 쓴다.

```python
#Top-Down

n = int(input())
price = [0] * (n+1)
card = [0] + list(map(int, input().split()))

def P(n):
     if n == 0:
          return 0
     elif (price[n] > 0):
          return price[n]
     
     for i in range(1, n+1):
               if price[n] < P(n-i) + card[i]:
                    price[n] = P(n-i) + card[i]
     return price[n]
               
print(P(n))


```

풀이는 비슷하다. 입력받은 값의 P를 출력해주는데 이를 재귀함수로 구한다.

입력받은 n의 P(n)을 구하려면 P(n-i)를 계속 호출하며 값을 채워나간다.