---
layout: post
title: "[프로그래머스] 단속카메라"
date: 2021-08-19 09:01
categories: 프로그래머스 그리디

---

알고리즘 풀기 236일차

:)



## < 문제 >

고속도로를 이동하는 모든 차량이 고속도로를 이용하면서 단속용 카메라를 한 번은 만나도록 카메라를 설치하려고 합니다.

고속도로를 이동하는 차량의 경로 routes가 매개변수로 주어질 때, 모든 차량이 한 번은 단속용 카메라를 만나도록 하려면 최소 몇 대의 카메라를 설치해야 하는지를 return 하도록 solution 함수를 완성하세요.

## <제한사항>

- 차량의 대수는 1대 이상 10,000대 이하입니다.
- routes에는 차량의 이동 경로가 포함되어 있으며 routes[i][0]에는 i번째 차량이 고속도로에 진입한 지점, routes[i][1]에는 i번째 차량이 고속도로에서 나간 지점이 적혀 있습니다.
- 차량의 진입/진출 지점에 카메라가 설치되어 있어도 카메라를 만난것으로 간주합니다.
- 차량의 진입 지점, 진출 지점은 -30,000 이상 30,000 이하입니다.

## < 풀이 >

```python

def solution(routes):
    # routes를 나간시간 순으로
    routes.sort(key = lambda x: x[1])
    
    answer = 1
    # camera = 현재 카메라가 설치된 위치
    camera = routes[0][1]
    
    # 두번째 차량부터 마지막번째 차량까지 반복문을 돌며 현재 카메라가 설치된 시간보다
    # 들어온 시간이 늦으면 camera에 현재 차량의 나간시간을 넣어주고 answer 1증가
    for i in range(1, len(routes)):
        if camera < routes[i][0]:
            camera = routes[i][1]
            answer += 1
                
    return answer

```

며칠간 골머리를 앓다 여러 사람의 풀이를 결국 찾아보게 되었다.

나는 우선 시작시간~끝나는 시간을 변수로 두고 반복문을 돌며 딱 해당 시간에 몇 대의 차가 있는지 확인하고 해당 차가 하나라도 빠지는 순간 (가장 많은 차가 겹치는 구간)에 카메라를 설치하면 된다고 생각했다.

즉, 시간이 지나며 현재 차량 개수가 하나 빠지면 카메라를 더해주면 된다 생각했는데 (가령 3->2가 되는 순간) 이렇게 할 경우 다른 카메라로 잡을 수 있는 거리인데 포함이 되어 카메라가 최소 개수가 안되는 많아지는 경우가 생긴다.

생각하다 생각하다 모르겠어서 풀이를 참고했다.

우선 정렬 자체를 난 들어오는 순 리스트의 인덱스[0]을 기준으로 했는데 [1]을 기준으로 함으로써 나가는 시간 기준으로 정렬을 한다.

당연히 첫 카메라는 처음으로 차가 나가는 시간에 맞춘다. (최소로 설치해야 하기에 우선 앞 차를 포함하며 뒷 차도 포함될 경우가 베스트기에 가장 뒷 시간, 즉 나가는 시간에 맞춘다.)

그러면 첫 차는 포함하며 카메라 설치하고 해당 시간에 뒷 차가 있는가 보는데 있다면 당연히 뒷차도 해당 카메라에 포함되니 패스, 그러나 카메라 찍히지 않게 설치 시점보다 뒤에 차가 들어올 경우 이제 해당 차량이 나갈때마다 넣어주며 모든 차량이 카메라 찍히게 하면 된다.


이 문제를 당연히 시작 시간에 맞춰 정렬했는데 생각을 바꿔 나가는 시간에 맞춰 정렬을 할 수도 있구나 느끼며 새로웠다. 
