---
layout: post
title:  "Baekjoon 알고리즘 54"
date:   2021-02-11 23:55 +0530
categories: python
---

알고리즘 풀기 68일차

굉장히 오랜만에 왔습니다....죄송합니다..

대신 시간 좀 들여서 여러 문제를 풀어보았습니다.

마냥 쉬운 문제만 고른거 아닙니다. (정답률 50 미만인 친구들로 선정해서 풀었습니다.)

그리디 문제 및 수학 문제를 골라 풀어보았습니다. 

모두 새해복 많이 받으세요 :)

:)


- #2875     대회 or 인턴

백준대학교에서는 대회에 나갈 때 2명의 여학생과 1명의 남학생이 팀을 결성해서 나가는 것이 원칙이다. (왜인지는 총장님께 여쭈어보는 것이 좋겠다.)

백준대학교는 뛰어난 인재들이 많아 올해에도 N명의 여학생과 M명의 남학생이 팀원을 찾고 있다. 대회에 참여하려는 학생들 중 K명은 반드시 인턴쉽 프로그램에 참여해야 한다. 인턴쉽에 참여하는 학생은 대회에 참여하지 못한다.

백준대학교에서는 뛰어난 인재들이 많기 때문에, 많은 팀을 만드는 것이 최선이다.

여러분은 여학생의 수 N, 남학생의 수 M, 인턴쉽에 참여해야하는 인원 K가 주어질 때 만들 수 있는 최대의 팀 수를 구하면 된다.

```python

girl, boy, k = map(int, input().split())
team = 0
while girl+boy>=k+3 and girl >= 2 and boy >= 1:
     team+=1
     girl-=2
     boy-=1

print(team) 

```

ㅎㅎ 무려 8번만에 맞힌 문제,,ㅋㅋㅋㅋㅋㅋㅋㅋㅋ
처음에 남학생 여학생 수를 반대로 보고 풀었다가 몇 번 틀렸는데, 후에 자꾸 틀려서 아마 조건문에서 걸리는 거 같았다.

처음에 girl+boy < k 로 하고 조건문을 만들었더니 자꾸 틀렸다. 우선 팀을 3명 생성 후 k 만큼이 인턴으로 가야하기에 반복문 돌기 위해 girl+boy-k가 3보다 같거나 커야한다.

오랜만에 문제 봤더니 머리가 안돌아간다.

---

- #1744     수 묶기

길이가 N인 수열이 주어졌을 때, 그 수열의 합을 구하려고 한다. 하지만, 그냥 그 수열의 합을 모두 더해서 구하는 것이 아니라, 수열의 두 수를 묶으려고 한다. 어떤 수를 묶으려고 할 때, 위치에 상관없이 묶을 수 있다. 하지만, 같은 위치에 있는 수(자기 자신)를 묶는 것은 불가능하다. 그리고 어떤 수를 묶게 되면, 수열의 합을 구할 때 묶은 수는 서로 곱한 후에 더한다.

예를 들면, 어떤 수열이 {0, 1, 2, 4, 3, 5}일 때, 그냥 이 수열의 합을 구하면 0+1+2+4+3+5 = 15이다. 하지만, 2와 3을 묶고, 4와 5를 묶게 되면, 0+1+(2*3)+(4*5) = 27이 되어 최대가 된다.

수열의 모든 수는 단 한번만 묶거나, 아니면 묶지 않아야한다.

수열이 주어졌을 때, 수열의 각 수를 적절히 묶었을 때, 그 합이 최대가 되게 하는 프로그램을 작성하시오.

```python

bigger1 = []
smaller0 = []
other = []
answer = 0

#케이스를 나눠서 각 배열에 넣어준다.
for i in range(int(input())):
     tmp = int(input())
     if tmp > 1:
          bigger1.append(tmp)
     elif tmp<0:
          smaller0.append(tmp)
     else:
          other.append(tmp)

#정렬
bigger1.sort()
smaller0.sort()

#2이상의 경우 큰 수끼리 곱해주는게 최댓값 // 홀수여서 남는 수는 answer에 더해준다.
while len(bigger1)>1:
     answer+= bigger1.pop() * bigger1.pop()
answer+=sum(bigger1)

#음수일 경우 곱하면 양수가 되어 최댓값을 낼 수 있다. // 홀수여서 남는 수는 answer에 더해준다.
while len(smaller0)>1:
     answer+=smaller0.pop(0)*smaller0.pop(0)

#음수 하나에 0이 있다면 음수를 0으로 만드는게 최대
if len(smaller0)==1 and 0 in other:
     smaller0=[]
elif len(smaller0)==1:
     answer+=smaller0[0]

print(answer+sum(other))

```

딱 봤을 때 쉬워보인다. 그러나 케이스 나누는게 까다로워 5번에 걸쳐 풀었던 문제. 
케이스를 빼고 생각하여 2번을 틀렸고 케이스를 잘못나눠 3번의 런타임에러 발생.

우선 처음에 2이상의 경우 곱해주는 경우만 생각해서 틀렸다. 음수를 곱했을 때 양수가 되는 것, 0을 만나 0으로 만드는 경우를 생각해내 수정을 거쳤다.

그러나 케이스를 나누는 과정에 우선 배열의 크기가 2이상이여야 pop함수를 쓸 수 있었는지 계속 runtime error가 떠서 새로 처음부터 조건을 걸고 배열을 나눠서 받고 계산하여 해결했다. 

---

- #1715     카드 정렬하기

정렬된 두 묶음의 숫자 카드가 있다고 하자. 각 묶음의 카드의 수를 A, B라 하면 보통 두 묶음을 합쳐서 하나로 만드는 데에는 A+B 번의 비교를 해야 한다. 이를테면, 20장의 숫자 카드 묶음과 30장의 숫자 카드 묶음을 합치려면 50번의 비교가 필요하다.

매우 많은 숫자 카드 묶음이 책상 위에 놓여 있다. 이들을 두 묶음씩 골라 서로 합쳐나간다면, 고르는 순서에 따라서 비교 횟수가 매우 달라진다. 예를 들어 10장, 20장, 40장의 묶음이 있다면 10장과 20장을 합친 뒤, 합친 30장 묶음과 40장을 합친다면 (10 + 20) + (30 + 40) = 100번의 비교가 필요하다. 그러나 10장과 40장을 합친 뒤, 합친 50장 묶음과 20장을 합친다면 (10 + 40) + (50 + 20) = 120 번의 비교가 필요하므로 덜 효율적인 방법이다.

N개의 숫자 카드 묶음의 각각의 크기가 주어질 때, 최소한 몇 번의 비교가 필요한지를 구하는 프로그램을 작성하시오.

```python
#정답
import sys
import heapq

card = []
answer = 0
for i in range(int(sys.stdin.readline())):
     heapq.heappush(card, int(sys.stdin.readline()))

card.sort()
while len(card)>1:
     tmp1 = heapq.heappop(card)
     tmp2 = heapq.heappop(card)
     answer+=tmp1+tmp2
     heapq.heappush(card, tmp1+tmp2)

print(answer)

```

아래와 같이 배열을 스택의 append, pop과 sort를 이용한 정렬로 풀었는데 시간 초과가 났다.
여기서 어떻게 시간을 줄일까, 아마 지속적 sort로 인해 시간초과 발생이 당연하다 생각됐다.
그래서 다른 풀이를 찾아보는데 모두가 heapq를 사용해서 푸는 것을 보고 해당 모듈을 써야하구나 했다.

해당 heapq는 데이터를 정렬된 상태로 저장하기 위해서 사용한다고 한다. 
heappop이 가장 작은 수를 반환하는 거기에 따로 정렬을 안해줘도 된다!! (굿)

```python
#시간초과
import sys
card = []
answer = 0
for i in range(int(sys.stdin.readline())):
     card.append(int(sys.stdin.readline()))

card.sort()
while len(card)>2:
     tmp1 = card.pop(0)
     tmp2 = card.pop(0)
     answer+=tmp1+tmp2
     card.append(tmp1+tmp2)
     card.sort()

print(sum(card)+answer)

```

작은 수를 계속 더해가는 문제

---

