---
layout: post
title:  "Baekjoon 알고리즘 63"
date:   2021-03-01 23:59 +0530
categories: python
---

알고리즘 풀기 77일차


:)

- #10569        다면체

수학자가 구를 깎아서 볼록다면체를 만들었다. 이 수학자는 임의의 볼록다면체에 대해 (꼭짓점의 수) - (모서리의 수) + (면의 수) = 2가 성립한다는 것을 알고 있다. 그래서 구를 깎는 게 취미인 이 사람은 꼭짓점, 모서리와 면의 수를 기록할 때 꼭짓점과 모서리의 수만 세고 면의 수는 세지 않는다.

# <풀이>

```python

for i in range(int(input())):
     V, E = map(int, input().split())
     print(2-V+E)

```

이제는 쉬운 문제 찾기가 너무 어려워요,,,

공식을 제공해줬다. (꼭짓점의 수) - (모서리의 수) + (면의 수) = 2 그대로 대입하면 풀리는 문제 ~~~~ 야호우


---

- #1920     수 찾기

N개의 정수 A[1], A[2], …, A[N]이 주어져 있을 때, 이 안에 X라는 정수가 존재하는지 알아내는 프로그램을 작성하시오.

# <풀이>

```python
#시간초과
import sys
N = int(sys.stdin.readline())
n = list(map(int, sys.stdin.readline().split()))
M = int(sys.stdin.readline())
m = list(map(int, sys.stdin.readline().split()))

for i in m:
     if i in n:
          print(1)
     else:
          print(0)

```

원래 내가 딱 생각한대로 푸니 당연히 시간초과가 났다. 이분 탐색 문제였는데 이분 탐색,,,그래서 어떻게 푸는건데,,

```python

import sys

def bin(a,x):
    start = 0
    end = len(n)-1

    while start <= end:
        mid = (start + end) // 2
        if x == a[mid]:
            return 1
        elif x > a[mid]:
            start = mid + 1
        else:
            end = mid - 1
    return 0

N = int(input())
n = list(map(int, input().split()))
n = sorted(n)


M = int(input())
m = list(map(int, input().split()))


for i in range(M):
    print(bin(n, m[i]))

```

찾아봤다. 코드. (공부는 내일 해보도록 하자. )

약간 이거 퀵정렬이 생각나는 풀이다. 정렬된 배열을 두고 앞, 뒤, 중간 값으로 점차 앞 뒤에서 좁혀나가며 찾는 풀이다.

중간을 기점으로 앞 뒤로 나뉘니 이분탐색- 맞는거 같다. 

확실히 기존에 in으로 배열에 있는지 탐색하는 방법은 시간복잡도가 O(n)이다. 

위의 정답 방법은 찾아보니 O(logn)으로 기존 탐색보다 더 효율적이라 한다.

오호,,,,,,,,,

