---
layout: post
title:  "2019 KAKAO 개발자 겨울 인턴십 문제"
date:   2020-11-1 11:51 +0530
categories: python
---

알고리즘 풀기 5일차

오늘은 프로그래머스 페이지를 구경하다 실력 체크 레벨 1단계 두 문제와 카카오 코테 문제를 하나 풀었다.

실력 체크 두 문제도 올리고 싶으나 저작권에 뭐 문제된다고 유출이 안된다한다. (풀고나니 문제 볼 수 있는 창이 닫혀버렸다.)

그래도 내 답은 볼 수 있어 답만 올린,,(도 되겠지?)

사실 레벨 1단계는 굉장히 쉬웠다. 2단계부터는 이분탐색, 그래프 등이 나올 수 있다하니 공부를 안해본 난, 더 공부하다 해봐야겠다.

:)

- #실력 검증 1 - 1

```python

def solution(s):
    s = s.lower()
    # [실행] 버튼을 누르면 출력 값을 볼 수 있습니다.
    if(s.count('p')==s.count('y')):
        return True
    else:
        return False

    return True
    
```

주어진 문자열 처리에 관련된 문제였다. 파이썬 함수들을 이용해서 쉽게 풀 수 있었다.

---

- #실력 검증 1 - 2

```python
def solution(arr):
    answer = [arr[0]]

    for i in range(1, len(arr)):
        pre = arr[i-1]
        if arr[i] == pre:
            continue
        else:
            answer.append(arr[i])
    print(answer)
    return answer
    
```

이와 비슷한 문제를 백준에서 풀어봐서 어렵지 않게 풀 수 있었다. 

---

- #2019 카카오 개발자 겨울 인턴십 - 크레인 인형뽑기 게임 


![2019_kakao_winter_1](https://user-images.githubusercontent.com/50662636/97806932-6719f980-1ca1-11eb-9ce6-4791e271d658.png)

```python
def solution(board, moves):
    blanket=[]
    answer = 0
    for k in range(0, len(moves)):
        for i in range(0, len(board)):
            if board[i][moves[k]-1] != 0:
                if blanket and blanket[-1] == board[i][moves[k]-1]:
                    answer += 1
                    blanket.pop()
                else:
                    blanket.append(board[i][moves[k]-1])
                board[i][moves[k]-1] = 0
                break
    return answer*2
    
```

board에 N*N크기의 뽑기 칸이 입력으로 오고, moves는 몇 번째 줄의 인형을 뽑을지 순서의 리스트가 입력으로 주어진다.

moves순서대로 board에서 인형을 뽑아 차곡차곡 다른 리스트(난 blanket이라는 곳에 담음)에 담는데 바로 밑 인형과 같은 인형일 경우 팡! 터지며 사라진다.

이때 몇개의 인형이 터졌는지를 출력해야 하는 문제다. 


우선 인형을 담은 빈 리스트 blanket을 만든다.

몇 번을 뽑을지 moves의 길이만큼 반복문을 돌리며 찾는다.

해당 반복문 안의 반복문은 크레인 속 인형을 찾는건데 2중 배열로 된 board에서 위에서 내려오며 인형이 있다! 즉 0이 아니면 !! 인형이 있는 것.

이때 생각해야 하는 경우는,

1) 인형을 바구니에 넣을건데 이전 인형과 같다면 터진다!

2) 다르면 바구니에 넣는다.



1이라면 정답을 1더해주고 인형 바구니에 안넣고! 바구니에 있던 같은 인형은 pop을 통해 없애준다.

2라면 바구니에 넣는다



그리고 뺀 인형 자리 (원래 자리)는 인형을 뺐으니 0으로 바꿔준다.

이 과정을 moves번 하고 나면 끝!


return 값으로 이제 두 배를 해야 하는 것을 안해서 자꾸 틀렸었다.

터진 인형의 개수니까 터진 횟수로 계산한 answer를 인형 두 개가 터지니까 두 배 해준다.



---
