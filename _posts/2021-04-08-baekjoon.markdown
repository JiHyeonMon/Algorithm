---
layout: post
title: "Baekjoon 알고리즘 71"
date: 2021-04-08 23:59 +0530
categories: python
---

알고리즘 풀기 97일차

:)

- # 2579
- # 계단 오르기

## < 문제 >

계단 오르기 게임은 계단 아래 시작점부터 계단 꼭대기에 위치한 도착점까지 가는 게임이다.

> 계단은 한 번에 한 계단씩 또는 두 계단씩 오를 수 있다. 즉, 한 계단을 밟으면서 이어서 다음 계단이나, 다음 다음 계단으로 오를 수 있다.

> 연속된 세 개의 계단을 모두 밟아서는 안 된다. 단, 시작점은 계단에 포함되지 않는다.

> 마지막 도착 계단은 반드시 밟아야 한다.

따라서 첫 번째 계단을 밟고 이어 두 번째 계단이나, 세 번째 계단으로 오를 수 있다. 하지만, 첫 번째 계단을 밟고 이어 네 번째 계단으로 올라가거나, 첫 번째, 두 번째, 세 번째 계단을 연속해서 모두 밟을 수는 없다.

각 계단에 쓰여 있는 점수가 주어질 때 이 게임에서 얻을 수 있는 총 점수의 최댓값을 구하는 프로그램을 작성하시오.

## < 입력 >

입력의 첫째 줄에 계단의 개수가 주어진다.

둘째 줄부터 한 줄에 하나씩 제일 아래에 놓인 계단부터 순서대로 각 계단에 쓰여 있는 점수가 주어진다. 계단의 개수는 300이하의 자연수이고, 계단에 쓰여 있는 점수는 10,000이하의 자연수이다.

## < 출력 >

첫째 줄에 계단 오르기 게임에서 얻을 수 있는 총 점수의 최댓값을 출력한다.

## < 제한사항 >

시간 제한 : 1초

메모리 제한 : 128MB

## < 풀이 >

```python

arr = []
d = []
n = int(input())
for i in range(n):
     arr.append(int(input()))

d.append(arr[0])
d.append(max(arr[0]+arr[1], arr[1]))
d.append(max(arr[0]+arr[2], arr[1]+arr[2]))
for i in range(3, n):
     d.append(max(d[i-2] + arr[i] , d[i-3] + arr[i] + arr[i - 1]))

print(d.pop())

```

점화식 찾기는 쉬웠다.

맨 마지막 칸은 전 칸에서 오던가(그럼 그 전은 마지막에서 3칸 전), 전전칸에서 오던가

이제 점화식을 세웠으니 그 전까지 3개의 배열은 i-3을 위해 3개를 채워야한다.

첫번째 칸은 당연히 arr[0], 두번째는 첫번째에서 오던가 바로 오던가, 세번째도 전칸에서 오던가 전전칸에서 오던가

사실 애를 먹은 부분은 위에가 맞는 식인데 자꾸 아래로 적어서 틀렸다.

> d.append(max(d[i-2] + arr[i] , d[i-3] + arr[i] + arr[i - 1]))

> d.append(max(d[i-2] + arr[i] , d[i-3] + arr[i] + d[i - 1]))

i가 전 칸에서 온다면 d에 든 값은 최댓값이기에 전 칸에서 온게 그대로 올 수 있다. (3칸 연속은 안됨)

그래서 i의 전 칸에서 올때는 arr[i-1]로 전 칸 값에 전 칸의 2칸 전 값을 더한다.
