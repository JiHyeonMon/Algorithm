---
layout: post
title: "[프로그래머스] 예상 대진표"
date: 2021-07-20 23:01
categories: 프로그래머스 2017팁스타운
---

알고리즘 풀기 232일차

:)

- # 예상 대진표


## < 문제 >

△△ 게임대회가 개최되었습니다. 이 대회는 N명이 참가하고, 토너먼트 형식으로 진행됩니다. 

N명의 참가자는 각각 1부터 N번을 차례대로 배정받습니다. 그리고, 1번↔2번, 3번↔4번, ... , N-1번↔N번의 참가자끼리 게임을 진행합니다. 

각 게임에서 이긴 사람은 다음 라운드에 진출할 수 있습니다. 

이때, 다음 라운드에 진출할 참가자의 번호는 다시 1번부터 N/2번을 차례대로 배정받습니다. 

만약 1번↔2번 끼리 겨루는 게임에서 2번이 승리했다면 다음 라운드에서 1번을 부여받고, 3번↔4번에서 겨루는 게임에서 3번이 승리했다면 다음 라운드에서 2번을 부여받게 됩니다. 

게임은 최종 한 명이 남을 때까지 진행됩니다.

이때, 처음 라운드에서 A번을 가진 참가자는 경쟁자로 생각하는 B번 참가자와 몇 번째 라운드에서 만나는지 궁금해졌습니다. 

게임 참가자 수 N, 참가자 번호 A, 경쟁자 번호 B가 함수 solution의 매개변수로 주어질 때, 처음 라운드에서 A번을 가진 참가자는 경쟁자로 생각하는 B번 참가자와 몇 번째 라운드에서 만나는지 return 하는 solution 함수를 완성해 주세요. 

단, A번 참가자와 B번 참가자는 서로 붙게 되기 전까지 항상 이긴다고 가정합니다.

## < 풀이 >

```python

def battle(n, a, b):
    if a%2 == 0:
        a = a//2
    else:
        a = a//2 + 1
    
    if b%2 == 0:
        b = b//2
    else: 
        b = b//2 + 1
    
    return n//2, a, b
    
def solution(n,a,b):
    answer = 0
    cnt = 1
    if a>b:
        a, b = b, a
    while True :
        if a%2==1 and a+1 == b:
            return cnt
        cnt += 1
        n, a, b = battle(n, a, b)
        
    return answer

```

이전부터 분명 풀었는데 항상 몇 개씩 테스트 케이스를 틀렸던 문제. 

우선 a가 b보다 항상 작게 설정한다. (이것도 분명 테스트케이스 예외 있었음)

그리고 battle함수를 돌려 a, b의 위치를 매번 조정한다. 

홀수라면, 가령 7번째였다면 다음 순서는 7//2+1인 4번째가 되고, 짝수라면 //2 한 번째로 이동한다. (물론 n 도 절반씩 준다.)

계속 실패했던 이유가 while문 나오는 조건으로 b-a==1 이라고 생각했다. 둘이 붙어있음 다음 라운드에 붙겠지 했는데 잘못 생각했다.

a가 홀수번째 && b가 짝수번째여야 해당 라운드에서 붙게된다. (가령 a==4, b==5가 되면 a는 3,4와 붙고 b는 5,6과 붙는다.)

그래서 탈출 조건문을 a가 홀수면서 b가 a+1일 때로 바꿔주니 3개 시간초과 나던 것 빼고 다 통과했다.

시간초과를 생각하면 분명 a==1인 조건일 것 같았다. (바로 나갈 수 있는 조건이 있는데 함수를 먼저 돌려 while에서 못나오는)

그래서 탈출문을 원래는 while문의 제일 뒤에 썼다가 그냥 제일 앞으로 땡겼다. 

-- 통과 -- 
