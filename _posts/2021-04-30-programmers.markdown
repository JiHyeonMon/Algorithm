---
layout: post
title: "프로그래머스 코딩테스트"
date: 2021-04-30 23:59 +0530
categories: python
---

알고리즘 풀기 111일차

:)

- # 셔틀 버스

>

## < 문제 >

카카오에서는 무료 셔틀버스를 운행하기 때문에 판교역에서 편하게 사무실로 올 수 있다. 카카오의 직원은 서로를 '크루'라고 부르는데, 아침마다 많은 크루들이 이 셔틀을 이용하여 출근한다.

이 문제에서는 편의를 위해 셔틀은 다음과 같은 규칙으로 운행한다고 가정하자.

> 셔틀은 09:00부터 총 n회 t분 간격으로 역에 도착하며, 하나의 셔틀에는 최대 m명의 승객이 탈 수 있다.

> 셔틀은 도착했을 때 도착한 순간에 대기열에 선 크루까지 포함해서 대기 순서대로 태우고 바로 출발한다. 예를 들어 09:00에 도착한 셔틀은 자리가 있다면 09:00에 줄을 선 크루도 탈 수 있다.
> 일찍 나와서 셔틀을 기다리는 것이 귀찮았던 콘은, 일주일간의 집요한 관찰 끝에 어떤 크루가 몇 시에 셔틀 대기열에 도착하는지 알아냈다. 콘이 셔틀을 타고 사무실로 갈 수 있는 도착 시각 중 제일 늦은 시각을 구하여라.

단, 콘은 게으르기 때문에 같은 시각에 도착한 크루 중 대기열에서 제일 뒤에 선다. 또한, 모든 크루는 잠을 자야 하므로 23:59에 집에 돌아간다. 따라서 어떤 크루도 다음날 셔틀을 타는 일은 없다.

## < 입력 >

셔틀 운행 횟수 n, 셔틀 운행 간격 t, 한 셔틀에 탈 수 있는 최대 크루 수 m, 크루가 대기열에 도착하는 시각을 모은 배열 timetable이 입력으로 주어진다.

> 0 ＜ n ≦ 10

> 0 ＜ t ≦ 60

> 0 ＜ m ≦ 45

> timetable은 최소 길이 1이고 최대 길이 2000인 배열로, 하루 동안 크루가 대기열에 도착하는 시각이 HH:MM 형식으로 이루어져 있다.

> 크루의 도착 시각 HH:MM은 00:01에서 23:59 사이이다.

## < 출력 >

콘이 무사히 셔틀을 타고 사무실로 갈 수 있는 제일 늦은 도착 시각을 출력한다. 도착 시각은 HH:MM 형식이며, 00:00에서 23:59 사이의 값이 될 수 있다.

## < 풀이 >

```python

from collections import deque

def solution(n, t, m, timetable):
    answer = ''
    bus = []

    # Set bus - 한자리 수일 경우 zfill 써서 앞에 0 붙이기
    for i in range(n):
        bus.append([9*60 + i*t, [0 for j in range(m)]])

    # timetable시간 다 분으로 - timetable 시간 순으로 정렬
    for i in range(len(timetable)):
        timetable[i] = int(timetable[i][:2])*60 + int(timetable[i][3:])

    timetable = deque(sorted(timetable))

    # 기존에 기다리던 crew들 버스 태우기
    while timetable:
        time = timetable.popleft()
        for i in range(len(bus)):
            if time<=bus[i][0] and 0 in bus[i][1]:
                bus[i][1][bus[i][1].index(0)] = time
                break

    if 0 in bus[-1][1]:
        m = bus[i][0]
        answer = str(m//60).zfill(2)+':'+str(m%60).zfill(2)

    # 자리 없음 - 맨 마지막 승객보다 빨리 오기
    else:
        m = bus[-1][1][-1]-1
        answer = str(m//60).zfill(2)+':'+str(m%60).zfill(2)

    return answer

```

우선 셔틀버스 오는 시간과 탈 수 있는 사람을 담을 리스트를 묶어서 리스트를 만든다.

이 때, 입력 시간이 '09:00'과 같은 형태의 string으로 들어오는데, 계산하기 편하기 위해 다 분으로 바꿔서 시간에 60곱하고 분을 더해서 만들어준다.

> ex) [[540, [0,0,0]], [550, [0,0,0]]]

.

이렇게 셔틀버스 리스트를 만들었으니 timetable에 있는 사람을 차곡차곡 버스에 태워준다.

마찬가지로 timetable에 있는 시간도 다 시간\*60+분 해서 숫자로 맞춰주고 정렬해준다. (일찍 온 사람 먼저 태우기 위해)

.

timetable에서 하나씩 빼서 비교한다. (정렬했으니 제일 왼쪽-제일 작은 수부터 pop위해 deque선언해서 시간 복잡도를 줄이고자 하였다. 생각해보니 sort를 reverse해서 pop해도 될 거 같다.)

버스의 시간표를 돌면서 버스 도착 시간에 맞춰서 + 혹은 전에 왔으면서 해당 시간에 버스가 비어 있다면 (0이 있다면 - 초기 다 0으로 세팅) 해당 0 하나에 시간을 넣어준다.

.

timetable을 다 채우고 나서 가장 늦게 탈 수 있는 시간을 계산해본다.

일단 맨 마지막 버스에 빈 자리가 있다면 (0이 있다면), 맨 마지막 버스 시간에 맞춰오는게 가장 늦게 오는 방법이다.

그러나 맨 마지막 버스에 빈 자리가 없다면 맨 마지막 버스에 탄 한 사람의 자리를 뺏어야 한다. (타고 있는 사람 중 제일 늦게 온 사람) 제일 마지막에 있는 리스트의 승객 리스트의 젤 마지막 사람보다 1분 더 빨리 오면 된다.
