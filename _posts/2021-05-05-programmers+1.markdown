---
layout: post
title: "[프로그래머스] 신규 아이디 추천"
date: 2021-05-05 23:59 +0530
categories: 프로그래머스, KAKAO
---

알고리즘 풀기 114일차

2021 KAKAO BLIND RECRUITMENT

:)

- # 신규 아이디 추천

>

## < 문제 >

카카오에 입사한 신입 개발자 네오는 "카카오계정개발팀"에 배치되어, 카카오 서비스에 가입하는 유저들의 아이디를 생성하는 업무를 담당하게 되었습니다.

"네오"에게 주어진 첫 업무는 새로 가입하는 유저들이 카카오 아이디 규칙에 맞지 않는 아이디를 입력했을 때, 입력된 아이디와 유사하면서 규칙에 맞는 아이디를 추천해주는 프로그램을 개발하는 것입니다.

다음은 카카오 아이디의 규칙입니다.

- 아이디의 길이는 3자 이상 15자 이하여야 합니다.
- 아이디는 알파벳 소문자, 숫자, 빼기(-), 밑줄(\_), 마침표(.) 문자만 사용할 수 있습니다.
- 단, 마침표(.)는 처음과 끝에 사용할 수 없으며 또한 연속으로 사용할 수 없습니다.

"네오"는 다음과 같이 7단계의 순차적인 처리 과정을 통해 신규 유저가 입력한 아이디가 카카오 아이디 규칙에 맞는 지 검사하고 규칙에 맞지 않은 경우 규칙에 맞는 새로운 아이디를 추천해 주려고 합니다.

신규 유저가 입력한 아이디가 new_id 라고 한다면,

    1단계 new_id의 모든 대문자를 대응되는 소문자로 치환합니다.
    2단계 new_id에서 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 모든 문자를 제거합니다.
    3단계 new_id에서 마침표(.)가 2번 이상 연속된 부분을 하나의 마침표(.)로 치환합니다.
    4단계 new_id에서 마침표(.)가 처음이나 끝에 위치한다면 제거합니다.
    5단계 new_id가 빈 문자열이라면, new_id에 "a"를 대입합니다.
    6단계 new_id의 길이가 16자 이상이면, new_id의 첫 15개의 문자를 제외한 나머지 문자들을 모두 제거합니다.
         만약 제거 후 마침표(.)가 new_id의 끝에 위치한다면 끝에 위치한 마침표(.) 문자를 제거합니다.
    7단계 new_id의 길이가 2자 이하라면, new_id의 마지막 문자를 new_id의 길이가 3이 될 때까지 반복해서 끝에 붙입니다.

예를 들어, new_id 값이 "...!@BaT#\*..y.abcdefghijklm" 라면, 위 7단계를 거치고 나면 new_id는 아래와 같이 변경됩니다.

1단계 대문자 'B'와 'T'가 소문자 'b'와 't'로 바뀌었습니다.
"...!@BaT#_..y.abcdefghijklm" → "...!@bat#_..y.abcdefghijklm"

2단계 '!', '@', '#', '_' 문자가 제거되었습니다.
"...!@bat#_..y.abcdefghijklm" → "...bat..y.abcdefghijklm"

3단계 '...'와 '..' 가 '.'로 바뀌었습니다.
"...bat..y.abcdefghijklm" → ".bat.y.abcdefghijklm"

4단계 아이디의 처음에 위치한 '.'가 제거되었습니다.
".bat.y.abcdefghijklm" → "bat.y.abcdefghijklm"

5단계 아이디가 빈 문자열이 아니므로 변화가 없습니다.
"bat.y.abcdefghijklm" → "bat.y.abcdefghijklm"

6단계 아이디의 길이가 16자 이상이므로, 처음 15자를 제외한 나머지 문자들이 제거되었습니다.
"bat.y.abcdefghijklm" → "bat.y.abcdefghi"

7단계 아이디의 길이가 2자 이하가 아니므로 변화가 없습니다.
"bat.y.abcdefghi" → "bat.y.abcdefghi"

따라서 신규 유저가 입력한 new_id가 "...!@BaT#\*..y.abcdefghijklm"일 때, 네오의 프로그램이 추천하는 새로운 아이디는 "bat.y.abcdefghi" 입니다.

신규 유저가 입력한 아이디를 나타내는 new_id가 매개변수로 주어질 때, "네오"가 설계한 7단계의 처리 과정을 거친 후의 추천 아이디를 return 하도록 solution 함수를 완성해 주세요.

## < 제한사항 >

new_id는 길이 1 이상 1,000 이하인 문자열입니다.

new_id는 알파벳 대문자, 알파벳 소문자, 숫자, 특수문자로 구성되어 있습니다.

new*id에 나타날 수 있는 특수문자는 -*.~!@#$%^&\*()=+[{]}:?,<>/ 로 한정됩니다.

## < 풀이 >

```python

import re

#   1단계 new_id의 모든 대문자를 대응되는 소문자로 치환합니다.
def one(s):
    return two(s.lower())

#    2단계 new_id에서 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 모든 문자를 제거합니다.
def two(s):
    s=re.sub('[^a-z0-9_.-]','',s)
    return three(s)

#    3단계 new_id에서 마침표(.)가 2번 이상 연속된 부분을 하나의 마침표(.)로 치환합니다.
def three(s):
    s = re.sub('[.]+', '.', s)
    return four(s)

#    4단계 new_id에서 마침표(.)가 처음이나 끝에 위치한다면 제거합니다.
def four(s):
    if len(s)>2:
        if s[0]=='.':
            s = s[1:]

        if s[-1]=='.':
            s = s[:-1]
    else:
        if s=='.':
            s=''
    return five(s)

#    5단계 new_id가 빈 문자열이라면, new_id에 "a"를 대입합니다.
def five(s):
    if not s:
        s = 'a'
    return six(s)

#    6단계 new_id의 길이가 16자 이상이면, new_id의 첫 15개의 문자를 제외한 나머지 문자들을 모두 제거합니다.
#         만약 제거 후 마침표(.)가 new_id의 끝에 위치한다면 끝에 위치한 마침표(.) 문자를 제거합니다.
def six(s):
    if len(s)>15:
        s = s[0:15]
        if s[-1]=='.':
            s = s[0:14]
    return seven(s)

#    7단계 new_id의 길이가 2자 이하라면, new_id의 마지막 문자를 new_id의 길이가 3이 될 때까지 반복해서 끝에 붙입니다.
def seven(s):
    if len(s)<3:
        while len(s) != 3:
            s+=s[-1]
    return s

def solution(new_id):
    answer = one(new_id)

    return answer

```

작년 카카오 코테 신청해놓고 이 문제를 푼 적이 있다. 사실 풀 지는 못했다. 당시 실제 상황에서 시간은 흐르고 마음만 급해져서 정규표현식 써야지 하면서 제대로 쓰지도 못하고 (문제만 보자는 마인드로 신청한거라) 좀 풀어보다 나왔다.

그렇기에 이 문제는 약간의 나의 과거 회피가 들어간 문제,,,

딱 봐도 정규표현식만 안다면 쉬운 문제다. 코드만 봐도 다 이해가 가는 문제. (정규표현식을 아는가, 어떻게 잘 쓰는가가 관건이었던거 같은 문제)

그래서 풀이보다는 다른 사람의 풀이와 내가 풀다 고민했던 부분을 집어볼까 한다.

```python

import re

def solution(new_id):
    st = new_id
    st = st.lower()
    st = re.sub('[^a-z0-9\-_.]', '', st)
    st = re.sub('\.+', '.', st)
    st = re.sub('^[.]|[.]$', '', st)
    st = 'a' if len(st) == 0 else st[:15]
    st = re.sub('^[.]|[.]$', '', st)
    st = st if len(st) > 2 else st + "".join([st[-1] for i in range(3-len(st))])
    return st

```

다른 사람 풀이의 제일 위에 있는 사람 풀이.

딱봐도 진짜 깔끔하다. 막상 이런 문제 시험에서 만나면 정규표현식 기억도 안날거같은데 제대로 잘 쓰는 느낌이 확 난다.

풀다가 4번째에서 길이 예외 처리를 안해줘서 에러가 자꾸 났었는데

```python
    # 4
    if answer[0] == '.':
        answer = answer[1:] if len(answer) > 1 else '.'
    if answer[-1] == '.':
        answer = answer[:-1]
```

이 분과 같은 식으로 짰는데 예외 처리 저렇게 뒤에 하나만 추가해줘도 되는 것... 이게 기술의 차이인건가...

갈 길이 멀다..
