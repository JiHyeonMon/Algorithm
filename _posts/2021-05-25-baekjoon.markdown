---
layout: post
title: "[백준] 계단오르기"
date: 2021-05-25 23:33 +0530
categories: 백준, 2579, 동적계획법
---

알고리즘 풀기 221일차

:)

- # 계단오르기
  >

## < 문제 >

계단 오르기 게임은 계단 아래 시작점부터 계단 꼭대기에 위치한 도착점까지 가는 게임이다. <그림 1>과 같이 각각의 계단에는 일정한 점수가 쓰여 있는데 계단을 밟으면 그 계단에 쓰여 있는 점수를 얻게 된다.

예를 들어 <그림 2>와 같이 시작점에서부터 첫 번째, 두 번째, 네 번째, 여섯 번째 계단을 밟아 도착점에 도달하면 총 점수는 10 + 20 + 25 + 20 = 75점이 된다.

계단 오르는 데는 다음과 같은 규칙이 있다.

1. 계단은 한 번에 한 계단씩 또는 두 계단씩 오를 수 있다. 즉, 한 계단을 밟으면서 이어서 다음 계단이나, 다음 다음 계단으로 오를 수 있다.
2. 연속된 세 개의 계단을 모두 밟아서는 안 된다. 단, 시작점은 계단에 포함되지 않는다.
3. 마지막 도착 계단은 반드시 밟아야 한다.

따라서 첫 번째 계단을 밟고 이어 두 번째 계단이나, 세 번째 계단으로 오를 수 있다. 하지만, 첫 번째 계단을 밟고 이어 네 번째 계단으로 올라가거나, 첫 번째, 두 번째, 세 번째 계단을 연속해서 모두 밟을 수는 없다.

각 계단에 쓰여 있는 점수가 주어질 때 이 게임에서 얻을 수 있는 총 점수의 최댓값을 구하는 프로그램을 작성하시오.

## < 풀이 >

```python

arr = []
n = int(input())
for i in range(n):
    arr.append(int(input()))

if len(arr) == 1:
    d = [arr[0]]
elif len(arr) == 2:
    d = [arr[0], max(arr[1], arr[0]+arr[1])]
elif len(arr) == 3:
    d = [arr[0], max(arr[1], arr[0]+arr[1]), max(arr[0]+arr[2], arr[1]+arr[2])]
else:
    d = [arr[0], max(arr[1], arr[0]+arr[1]), max(arr[0]+arr[2], arr[1]+arr[2])]
    for i in range(3, n):
        d.append(max(d[i-2]+arr[i], arr[i-1]+d[i-3]+arr[i]))

print(d[-1])

```

이 문제 저번에 푼 적 있었는데 런타임에러가 났던 문제.

길이가 1, 2, 3까지는 단조롭다. 당연히 계단이 한 칸이면 한 칸 이동, 계단이 두 칸이면 바로 두 칸 vs 한 칸 한 칸 갈건지 중에 최대값, 계단이 세 칸이면 한 칸 밟고 두 칸 vs 두 칸 밟고 한 칸.

그러니 계단이 세 개일 경우까지는 넣어주고 그 이상일 경우는 이제 최댓값을 찾는다.

구하고자 하는 건 각 계단을 밟아 얻을 수 있는 점수의 최댓값이다. 마지막 칸을 밟을 수 있는 경우를 생각하자.

바로 두 칸 전 vs 한 칸 전 + 두 칸 전( 한 칸씩 세칸을 못 밟으니 ) -> 이렇게 두 가지 경우가 있고 이 중 최댓값을 고르면 된다.

당연히 이런 식으로 하나하나 내려가며 찾게 될 것.

    점화식 = max(d[i-2]+arr[i], arr[i-1]+d[i-3]+arr[i])

d[i]에는 i 칸 계단에서의 최대 점수를 저장하기에 d 리스트의 마지막 값 (= 마지막 계단에서의 최댓값) 을 리턴해주면 된다.
