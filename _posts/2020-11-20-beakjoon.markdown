---
layout: post
title:  "Baekjoon 알고리즘 21"
date:   2020-11-20 02:52 +0530
categories: python
---

알고리즘 풀기 21일차

어제의 병합정렬과 유사한 문제를 풀어보았다. 

:)


- #10989     수 정렬하기 3

```python
#10989
#수 정렬하기 3


def merge_sort(n):
     v = len(n)
     if v<=1:
          return n
     v = v//2
     left = merge_sort(n[0:v])
     right = merge_sort(n[v:len(n)])
     
     return merge(left, right)

def merge(left, right):
     a=[]
     i, j = 0,0
     while (i<len(left) and j<len(right)):
          if left[i] < right[j]:
               a.append(left[i])
               i+=1
          elif left[i]>right[j]:
               a.append(right[j])
               j+=1
          else:
               a.append(left[i])
               a.append(right[j])
               i+=1;j+=1

     if i == len(left):
          a = a + right[j:len(right)]
     if j == len(right):
          a = a + left[i:len(left)]

     return a



n = [int(input()) for i in range(int(input()))]

answer = merge_sort(n)
print(*answer, sep="\n")


```

어제 배운 병합정렬을 사용해서 응용해서 짜봤다. 테스트 케이스는 다 만족시키는데 메모리 초과 오류가 떴다.

ㅎㅎㅎ메모리 초과는 어찌 해결해야할까, 예시 코드들을 찾아봤다.

```python
import sys
n = int(input())
check_list = [0] * 10001

for i in range(n):
    a = int(sys.stdin.readline())
    check_list[a] = check_list[a] + 1

for j in range(len(check_list)):
    if check_list[j] !=0:
        for c in range(check_list[j]):
            print(j)
```

대부분 위와 같은 방식으로 풀었다. 미리 1~10000의 수의 칸을 배정하는데 이 때 10000개를 배정하면 안되고 10001만큼 배정해야 한다고 한다. 

그리고 input()대신 더 속도가 빠른 sys.stdin.readline()을 통해 입력을 받는다. 

아무리 맨 위와 같이 로직이 맞아도 시간초과나 메모리 초과는 사실 어떻게 더 해야할지 모르겠다,,ㅎㅎ 참 어렵다.

이런 예제들 많이 찾아보며 이렇게 푸는 방법도 있구나, 이런 게 더 속도가 좋구나, 효율이 좋구나 배워야겠다.

---


