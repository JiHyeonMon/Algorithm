---
layout: post
title:  "Baekjoon 알고리즘 40"
date:   2021-01-12 23:30 +0530
categories: python
---

알고리즘 풀기 52일차

짜증난다,,,, 

매일 얼른 풀고 넷플릭스봐야지 다짐하는데 왜 매번 한시간 이상씩 문제를 붙잡고 늘어지는 걸까,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,

얼른 풀고 넷플 보고싶다,,, (잠도 오는데)

:)


- #1931     회의실 배정

한 개의 회의실이 있는데 이를 사용하고자 하는 N개의 회의에 대하여 회의실 사용표를 만들려고 한다. 각 회의 I에 대해 시작시간과 끝나는 시간이 주어져 있고, 각 회의가 겹치지 않게 하면서 회의실을 사용할 수 있는 회의의 최대 개수를 찾아보자. 단, 회의는 한번 시작하면 중간에 중단될 수 없으며 한 회의가 끝나는 것과 동시에 다음 회의가 시작될 수 있다. 회의의 시작시간과 끝나는 시간이 같을 수도 있다. 이 경우에는 시작하자마자 끝나는 것으로 생각하면 된다.

```python

import sys

N = int(sys.stdin.readline())
room = []
for i in range(N):
     room.append(list(map(int, sys.stdin.readline().split())))

room = sorted(room, key = lambda x : (x[1], x[0]))
end = 0
answer = 0
for i, j in room:
     if i >= end:
          answer+=1
          end = j
          
print(answer)

```

우선 정렬을 해준다. 

사실 처음에 아래와 같이 코드를 짰다. 정렬을 앞에 시작시간 먼저 정렬 후 끝나는 시간으로 정렬을 하여 첫 시작시간의 종료시간 이전까지의 숫자들 for문을 통해 각 경우의 수를 다 구해서 answer를 구하는 방식으로 풀었다. 당연히 반복문에 반복문 시간이 오래 걸려 시간초과 오류를 만났다.

```python
#시간초과

import sys

N = int(sys.stdin.readline())
room = []
for i in range(N):
     room.append(list(map(int, sys.stdin.readline().split())))

room = sorted(room, key = lambda x : (x[0], x[1]))
answer = 0
for i in range(room[0][1]):
     cnt = 1
     end = room[i][1]
     j = i
     while True:
          if j==N:
               break
          if end<=room[j][0]:
               end = room[j][1]
               cnt+=1
          j+=1
     if cnt > answer:
          answer = cnt
          
print(answer)

```

사람들 풀이를 보니 대부분 종료시간 먼저 생각해 푸는 것을 봤다. 처음에 이 생각을 했긴 했지만 당연히 시작 시간 부터 정렬을 했기에 다시 풀 때 종료 시간부터 정렬시켰다. 

종료시간 -> 시작시간 순으로 정렬을 하여 가장 적게 들면서 시작시간이 빠른 회의부터 넣으며 같은 방식으로 풀자 풀렸다.

오늘은 시간초과의 늪,,,

---

![image](https://user-images.githubusercontent.com/50662636/104327952-aa5cd800-552e-11eb-86f7-55ed8fdd87ba.png)
